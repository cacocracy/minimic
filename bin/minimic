#!/usr/bin/env python3
import argparse
import logging
import pprint
import json
import sys
import os
import re

from minimic import ClientSession, save_profile, save_album, gen_gallery_html


REQUIRED_VARS = ['MINIMIC_PASSWORD', 'MINIMIC_USERNAME', 'MINIMIC_URL',
                 'MINIMIC_ARCHIVE', 'MINIMIC_SIGNIN']
for v in REQUIRED_VARS:
    missing_vars = []
    if os.environ.get(v) is None:
        missing_vars.append(v)
    if missing_vars:
        raise ValueError(f'Missing shell vars {", ".join(missing_vars)}')


def sc_profile(args):
    archive_dir = os.path.expanduser(os.environ['MINIMIC_ARCHIVE'])
    if not os.path.isdir(archive_dir):
        logging.warning(f"Making archive at {archive_dir}")
        os.makedirs(archive_dir, exist_ok=True)

    profiles = [n for n in [args.profile_url] if n]
    if len(profiles) == 0:
        for line in sys.stdin:
            profiles.append(line.strip())
    
    profile_urls = []
    for profile_url in [p for p in profiles if p]:
        if profile_url.isdigit():
            profile_id = profile_url
            profile_url = f'{os.environ["MINIMIC_URL"]}/profiles/{profile_id}'
        else:
            profile_id = os.path.basename(profile_url).split('-')[0]
            profile_url = profile_url
        
        profile_dir = os.path.join(archive_dir, f'profile-{profile_id}')
        if os.path.exists(profile_dir):
            logging.warning(f'Profile directory at {profile_dir} already exists')
        else:
            profile_urls.append((profile_id, profile_url, profile_dir))

    client = ClientSession(os.environ['MINIMIC_SIGNIN'],
                           os.environ['MINIMIC_USERNAME'],
                           os.environ['MINIMIC_PASSWORD'])
    try:
        client.login()
        for pid, purl, pdir in profile_urls:
            try:
                os.makedirs(pdir)
                r = save_profile(client, profile_url=purl,
                             profile_id=pid, target_dir=pdir)
                pprint.pprint(r)
            except Exception as e:
                logging.error(e)
    finally:
        client.session.close()


def sc_gallery(args):
    archive_dir = os.path.expanduser(os.environ['MINIMIC_ARCHIVE'])
    if not os.path.isdir(archive_dir):
        logging.warning(f"Making archive at {archive_dir}")
        os.makedirs(archive_dir, exist_ok=True)

    galleries = [n for n in [args.gallery_url] if n]
    if len(galleries) == 0:
        for line in sys.stdin:
            galleries.append(line.strip())

    gallery_urls = []
    for gallery_url in [g for g in galleries if g]:
        if gallery_url.isdigit():
            gallery_id = gallery_url
            gallery_url = f'{os.environ["MINIMIC_URL"]}/galleries/{gallery_id}'
        else:
            gallery_id = os.path.basename(gallery_url).split('-')[0]
            gallery_url = gallery_url
        gallery_urls.append((gallery_id, gallery_url))

    client = ClientSession(os.environ['MINIMIC_SIGNIN'],
                           os.environ['MINIMIC_USERNAME'],
                           os.environ['MINIMIC_PASSWORD'])
    try:
        client.login()
        for gid, gurl in gallery_urls:
            try:
                r = save_album(client, gurl, os.environ['MINIMIC_ARCHIVE'],
                               force=args.force)
                pprint.pprint(r)
            except Exception as e:
                logging.error(e)
    finally:
        client.session.close()


def sc_index(args):
    items = os.listdir(os.environ['MINIMIC_ARCHIVE'])
    gallery_dirs = [g for g in items if re.match('p[\d]+-a[\d]+', g)]
    for g in gallery_dirs:
        gen_gallery_html(g)


def sc_status(args):
    target_dir = None
    if args.gallery_id:
        if args.gallery_id.isdigit():
            for d in os.listdir(os.environ['MINIMIC_ARCHIVE']):
                if f'-a{args.gallery_id}' in d:
                    target_dir = d
        else:
            for d in os.listdir(os.environ['MINIMIC_ARCHIVE']):
                if args.gallery_id == d:
                    target_dir = d
        if target_dir is None:
            print(f'ERROR - {args.gallery_id} - Not a valid key')
            sys.exit(1)

    if target_dir:
        search_list = [target_dir]
    else:
        search_list = os.listdir(os.environ['MINIMIC_ARCHIVE'])
    
    for gk in search_list:
        if re.match('p[\d]+-a[\d]+', gk) is None:
            continue

        fullp = os.path.join(os.environ['MINIMIC_ARCHIVE'], gk)
        if not os.path.isdir(fullp):
            print(f'ERROR - {gk} - {fullp} is not directory')
            continue

        # Check existence of 00-Info.json
        if not os.path.isfile(os.path.join(fullp, '00-Info.json')):
            print(f'ERROR - {gk} - Cannot find 00-Info.json')
            continue

        # Check expected images count
        jd = json.load(open(os.path.join(fullp, '00-Info.json')))
        eimgcnt = jd.get('images')
        aimgcnt = [i for i in os.listdir(fullp) if any([ext in i.lower()
                   for ext in ['.png', '.jpg', '.jpeg', '.gif']])]
        if eimgcnt != len(aimgcnt):
            print(f'ERROR - {gk} - Found {len(aimgcnt)} images, '
                  f'expected {eimgcnt}')
            continue


def sc_inventory(args):
    gmap = {}
    contents = os.listdir(os.environ['MINIMIC_ARCHIVE'])
    for gallery in [c for c in contents if re.match('p[\d]+-a[\d]+', c)]:
        pid, gid = gallery.split('-')
        pid, gid = pid[1:], gid[1:]
        if pid in gmap.keys():
            gmap[pid].append(gid)
        else:
            gmap[pid] = [gid]

    for k in sorted(gmap.keys(), key=lambda x: len(gmap[x]), reverse=True):
        pdir = os.path.join(os.environ['MINIMIC_ARCHIVE'], f'profile-{k}')
        name, country = '---', ''
        if os.path.isdir(pdir):
            pdata = json.load(open(os.path.join(pdir, 'info.json')))
            name, country = pdata.get('name'), pdata.get('country')

        print(f' {k} "{name}" {country} --> {len(gmap[k])} albums')

if __name__ == '__main__':
    logging.basicConfig(format='%(levelname)s %(module)s.%(funcName)s() '
                               'line %(lineno)d -- %(message)s',
                        level=logging.WARNING)

    parser = argparse.ArgumentParser(description="Minimic interface")
    parser.add_argument('--force', action='store_true', default=False,
        help='Force refresh of profile or gallery')
    subparsers = parser.add_subparsers(title='Subcommands',
                                       dest='subparser_name')
    
    sp_save_gallery = subparsers.add_parser('gallery',
        help='Download a gallery with images')
    sp_save_gallery.add_argument('gallery_url', type=str, nargs='?',
        help='Album URL or ID', default=None)

    sp_save_profile = subparsers.add_parser('profile',
        help='Save profile information')
    sp_save_profile.add_argument('profile_url', type=str, nargs='?',
        help='Profile URL or ID', default=None)
   
    sp_index_archive = subparsers.add_parser('index',
        help='Create index friendly to web browsers')

    sp_status = subparsers.add_parser('status',
        help='Alert to any incomplete or corrupted galleries')
    sp_status.add_argument('gallery_id', type=str, nargs='?',
        help='Gallery directory name or ID', default=None)

    sp_inventory = subparsers.add_parser('inventory',
        help='Give summary of archive')

    args = parser.parse_args()
    if args.subparser_name == 'gallery':
        sc_gallery(args)
    elif args.subparser_name == 'profile':
        sc_profile(args)
    elif args.subparser_name == 'index':
        sc_index(args)
    elif args.subparser_name == 'status':
        sc_status(args)
    elif args.subparser_name == 'inventory':
        sc_inventory(args)
    else:
        raise ValueError('Invalid subcommand')

